# -*- coding: utf-8 -*-
"""Project Sprint 3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SA9Bq_sYaH9J8x_jwB5TebmiovJj2MQ5

# Vehicle Price Analysis Project

## Introduction

Welcome to the Vehicle Price Analysis project. As an analyst at Crankshaft List, you are tasked with analyzing a vast dataset of vehicle advertisements to uncover the factors influencing vehicle prices. Every day, hundreds of free vehicle ads are posted on our company's website, and this project aims to leverage the data collected over the years to provide insights into pricing dynamics.

## Project Description

The goal of this project is to analyze historical vehicle advertisement data to identify key factors that affect vehicle prices. This involves cleaning and preprocessing the data, conducting exploratory data analysis, and ultimately determining which variables most significantly impact vehicle pricing.

## Project Instructions

### Step 1: Data Loading and Initial Examination

- Load the dataset located.
- Examine the general information of the dataset to understand its structure and contents.

### Step 2: Data Preprocessing

#### Handling Missing Values:
- Identify and examine missing values in the dataset.
- For columns where it is reasonable to infer missing values (e.g., Boolean columns), fill in the missing values accordingly.
- For other columns, determine the best approach to handle missing values, considering the significance and impact of the missing data.

#### Data Type Conversion:
- Identify columns that need data type conversions and explain the rationale behind these changes.

### Step 3: Feature Engineering

- Add columns for the day of the week, month, and year the advertisement was posted.
- Calculate the age of the vehicle (in years) at the time of the advertisement.
- Compute the average annual mileage for each vehicle.
- Convert the `condition` column's string values to a numeric scale:
  - `new` = 5
  - `like new` = 4
  - `excellent` = 3
  - `good` = 2
  - `fair` = 1
  - `salvage` = 0

### Step 4: Exploratory Data Analysis

- Analyze key parameters: price, vehicle age, mileage, number of cylinders, and condition. Create histograms for each parameter and examine the effect of outliers on the histogram shapes.
- Identify outliers and remove them. Save the outliers in a separate DataFrame and continue analysis with the filtered data.
- Create new histograms without outliers and compare them with the original ones, drawing conclusions for each parameter.
- Analyze the number of days advertisements are listed (`days_listed`). Create a histogram, calculate the mean and median, and explain typical advertisement durations. Identify quickly removed ads and those listed for extended periods.
- Analyze the number of advertisements and average prices for each vehicle type. Create a graph showing the relationship between the number of ads and vehicle type, focusing on the two most frequently advertised types.

### Step 5: Detailed Analysis of Price Influencing Factors

- Investigate factors that most significantly influence vehicle prices. For the most popular vehicle types identified, analyze whether the price depends on age, mileage, condition, transmission type, and color.
- Create boxplots for categorical variables (transmission type and color) and scatter plots for continuous variables (age, mileage, and condition). Ensure each category has at least 50 ads to maintain validity.

## Conclusion

- Summarize findings from the analysis.
- Discuss key factors influencing vehicle prices.
- Provide recommendations based on the analysis results.

## Data Description

The dataset contains the following columns:

- `price`: Vehicle price
- `model_year`: Model year of the vehicle
- `model`: Vehicle model
- `condition`: Condition of the vehicle
- `cylinders`: Number of cylinders
- `fuel`: Type of fuel (gas, diesel, etc.)
- `odometer`: Mileage of the vehicle at the time of advertisement
- `transmission`: Transmission type
- `paint_color`: Color of the vehicle
- `is_4wd`: Whether the vehicle has four-wheel drive (Boolean)
- `date_posted`: Date the advertisement was posted
- `days_listed`: Number of days the advertisement was listed before being removed

By following these steps, we aim to gain a comprehensive understanding of the factors affecting vehicle prices and provide actionable insights for Crankshaft List. Let's get started!

**Data Loading and Initial Examination**
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

data = pd.read_csv('/content/vehicles_us.csv')

"""lets find out some informations regarding the data that we currently have."""

data.info()

data.sample(5)

"""Based on informations and data sample, there are some anomalies on the data that need to further investigations.

There are some columns that have data type that need to be corrected such as:

- model_year supposed to be integer.
- cylinders supposed to be integer.
- odometer supposed to be integer.
- is_4wd supposed to be boolean, when the value stated as 1 it means Yes, if its Nan then No (calculation on chapter 1.2).

Based on information, we can see some missing value can be found in columns bellow:

- model_year
- cylinders
- odometer
- paint_color
- is_4wd.

Based on the data loadment process, we have found some issues as bellow:

1. Data type issue : some column may have type that not suitable for further analysis.
2. Missing values : there are some missing values in 5 columns.

This faulty may deffect the analysis and resulting bias number that will be affecting the decision making process in the future. Therefore some action are needed:

1. Proper the data type in column model_year, cylinders, odometer, and is_4wd into integer.
2. Take action the missing value which we will discuss later based on the condition in each column. Those columns are model_year, cylinders, odometer, paint_color, and is_4wd.

**Data Preprocessing**

Let us take a look on missing value on those 5 columns and see how many of them that might affect the integrity of analysis.
"""

null_df = data.isnull().sum()
lost_df = pd.DataFrame(null_df, columns=['counts']).rename_axis('columns')
lost_df['percent%'] = round(lost_df['counts'] / data.shape[0] * 100, 2).astype(str)+'%'
lost_df.sort_values('percent%', ascending=False)

"""Handling missing value in column is_4wd"""

data['is_4wd'].unique()

"""In the column is_4wd we need to

fill missing value with 0 to indicate that specific vehicle is not 4 wheel drive, instead of leave it blank.
"""

data['is_4wd'] = data['is_4wd'].fillna(0)

data['is_4wd'].unique()

"""Handling missing value in column paint_color"""

data['paint_color'].unique()

nan_color = data.loc[data['paint_color'].isna()]
nan_color

"""Because the limitation of the information of the data project that given, we can fill the missing value in column paint_color with value "unstated" instead of leave it blank"""

data['paint_color'] = data['paint_color'].fillna('unstated')

data['paint_color'].unique()

"""Handling missing value in column model_year & cylinders"""

grouped_by_model = data.groupby('model').agg({'model_year': 'median', 'cylinders': 'median'})
for model in data['model'].unique():
  data.loc[(data['model'] == model) & (data['model_year'].isna()), 'model_year'] = \
      grouped_by_model.loc[grouped_by_model.index == model, 'model_year'][0]
  data.loc[(data['model'] == model) & (data['cylinders'].isna()), 'cylinders'] = \
      grouped_by_model.loc[grouped_by_model.index == model, 'cylinders'][0]

null_df = data.isnull().sum()
lost_df = pd.DataFrame(null_df, columns=['counts']).rename_axis('columns')
lost_df['percent%'] = round(lost_df['counts'] / data.shape[0] * 100, 2).astype(str)+'%'
lost_df.sort_values('percent%', ascending=False)

"""The missing value in column model_year and cylinders has been filled with median.

Handling missing value in column odometer
"""

grouped_by_condition = data.groupby('condition').agg({'odometer': 'mean', 'price': 'mean'})
for cond in data['condition'].unique():
  data.loc[(data['condition'] == cond) & (data['odometer'].isna()), 'odometer'] = \
      grouped_by_condition.loc[grouped_by_condition.index == cond, 'odometer'][0]
  data.loc[(data['condition'] == cond) & (data['price'].isna()), 'price'] = \
      grouped_by_condition.loc[grouped_by_condition.index == cond, 'price'][0]

null_df = data.isnull().sum()
lost_df = pd.DataFrame(null_df, columns=['counts']).rename_axis('columns')
lost_df['percent%'] = round(lost_df['counts'] / data.shape[0] * 100, 2).astype(str)+'%'
lost_df.sort_values('percent%', ascending=False)

"""Data Type Conversion"""

data['model_year'] = data['model_year'].astype(int)
data['cylinders'] = data['cylinders'].astype(int)
data['days_listed'] = data['days_listed'].astype(int)
data['odometer'] = data['odometer'].astype(int)
data['is_4wd'] = data['is_4wd'].astype(bool)
data['date_posted'] = pd.to_datetime(data['date_posted'], format='%Y-%m-%d')
data.info()

data.head(5)

"""All data type is now proper

**Feature Engineering**
"""

# Add time and date values ​​when the ad is displayed
data['weekday_posted'] = data['date_posted'].dt.weekday
data['year_posted'] = data['date_posted'].dt.year
data['month_posted'] = data['date_posted'].dt.month

data.head(2)

# Add the age of the vehicle when the ad is displayed
data['car_age'] = (data['year_posted'] - data['model_year']).astype(int) + 1

data.head(2)

# Add the average vehicle mileage per year
data['odo_per_year'] = data['odometer'] / data['car_age']
data.head(2)

data['condition'] = data['condition'].replace({'new' : 5,
                                               'like new' : 4,
                                               'excellent' : 3,
                                               'good' : 2,
                                               'fair' : 1,
                                               'salvage' : 0})

data.head(2)

data.isna().sum()

data.info()

data.sample()

"""**Exploratory Data Analysis**

Price
"""

sns.histplot(data['price'], bins=100)
plt.show()

data['price'].describe()

sns.boxplot(data=data, x='price')
plt.show()

q1_price = data['price'].describe()['25%']
q3_price = data['price'].describe()['75%']
iqr_price = q3_price - q1_price

lower_whisker_price = q1_price - 1.5 * iqr_price
upper_whisker_price = q3_price + 1.5 * iqr_price

print("Q1:", q1_price)
print("Q3:", q3_price)
print("Interquartile Range (IQR):", iqr_price)
print("Lower Whisker:", lower_whisker_price)
print("Upper Whisker:", upper_whisker_price)

data.loc[(data['price'] < -12758.5) | (data['price'] > 34597.5)]

"""Based on this analysis on column price:

1. Outliyers detected that may be caused by typos (1646 rows)
2. There are values that doesnt make sense where the price is only bellow 10 even 1.

Car Age
"""

sns.histplot(data['car_age'], bins=100)
plt.show()

sns.boxplot(data=data, x='car_age')
plt.show()

q1_car_age = data['car_age'].describe()['25%']
q3_car_age = data['car_age'].describe()['75%']
iqr_car_age = q3_car_age - q1_car_age

lower_whisker_car_age = q1_car_age - 1.5 * iqr_car_age
upper_whisker_car_age = q3_car_age + 1.5 * iqr_car_age

print("Q1:", q1_car_age)
print("Q3:", q3_car_age)
print("Interquartile Range (IQR):", iqr_car_age)
print("Lower Whisker:", lower_whisker_car_age)
print("Upper Whisker:", upper_whisker_car_age)

data.loc[(data['car_age'] < -7) | (data['car_age'] > 25)]

car_age = data.copy()

car_age_slice = car_age.query('car_age < 25')

sns.histplot(car_age_slice['car_age'], bins=100)
plt.show()

q1_car_real = car_age_slice['car_age'].describe()['25%']
q3_car_real = car_age_slice['car_age'].describe()['75%']
iqr_car_real = q3_car_real - q1_car_real

lower_whisker_car_real = q1_car_real - 1.5 * iqr_car_real
upper_whisker_car_real = q3_car_real + 1.5 * iqr_car_real

print("Q1:", q1_car_real)
print("Q3:", q3_car_real)
print("Interquartile Range (IQR):", iqr_car_real)
print("Lower Whisker:", lower_whisker_car_real)
print("Upper Whisker:", upper_whisker_car_real)

"""Based on the calculation on car_age:

1. There are 737 outliers.
2. Theres odd value when car manufactured before 1960 where some of them has not released yet.

Odometer
"""

sns.histplot(data['odometer'], bins=100)
plt.show()

sns.boxplot(data=data, x='odometer')
plt.show()

q1_odometer = data['odometer'].describe()['25%']
q3_odometer = data['odometer'].describe()['75%']
iqr_odometer = q3_odometer - q1_odometer

lower_whisker_odometer = q1_odometer - 1.5 * iqr_odometer
upper_whisker_odometer = q3_odometer + 1.5 * iqr_odometer

print("Q1:", q1_odometer)
print("Q3:", q3_odometer)
print("Interquartile Range (IQR):", iqr_odometer)
print("Lower Whisker:", lower_whisker_odometer)
print("Upper Whisker:", upper_whisker_odometer)

data.loc[(data['odometer'] < -24209) | (data['odometer'] > 251039)]

"""Based on the analysis on column odometer:

1. There are 1025 outliers

Cylinders
"""

sns.histplot(data['cylinders'], bins=10)
plt.show()

sns.boxplot(data=data, x='cylinders')
plt.show()

"""Based on the calculation on cylinders there are no anomalies with outliers

Handling Outliers

Based on calculation in chapter 1.6 the outliers are stated as bellow:

1. Price Lower Whisker: -12758.5 Upper Whisker: 34597.5
2. Car Age Lower Whisker: -7.0 Upper Whisker: 24.0
3. Odometer Lower Whisker: -24209.0 Upper Whisker: 251039.0
4. Condition Lower Whisker: 1 Upper Whisker: 4

In order to having reliable output informations, we will have to exclude the outliers and put it into new dataset called data_clean
"""

list_of_selected_column = ['price', 'car_age', 'odometer']

def upper_lower_whisker(column_name=['price', 'car_age', 'odometer']):
    Q1 = data[column_name].quantile(0.25)
    Q3 = data[column_name].quantile(0.75)
    IQR = Q3 - Q1
    lower_whisker = Q1 - 1.5 * IQR
    upper_whisker = Q3 + 1.5 * IQR

    return lower_whisker_price, upper_whisker_price

lower_whisker, upper_whisker = upper_lower_whisker(column_name=list_of_selected_column[0])

data_clean = data.copy()

for column in list_of_selected_column:
    print('start cleaning outlier on', column)
    lower, upper = upper_lower_whisker(column)
    data_clean = data_clean[(data_clean[column] > lower) & (data_clean[column] < upper)]
    print('cleaning outlier on', column, 'was finished!')

sns.boxplot(data=data_clean, x='price')
plt.show()

sns.boxplot(data=data_clean, x='car_age')
plt.show()

sns.boxplot(data=data_clean, x='odometer')
plt.show()

list_of_selected_column_age = ['car_age']

def upper_lower_whisker_age(column_name=('car_age')):
    Q1_age = data_clean[column_name].quantile(0.25)
    Q3_age = data_clean[column_name].quantile(0.75)
    IQR_age = Q3_age - Q1_age
    lower_whisker_age = Q1_age - 1.5 * IQR_age
    upper_whisker_age = Q3_age + 1.5 * IQR_age

    return lower_whisker_age, upper_whisker_age

lower_whisker_age, upper_whisker_age = upper_lower_whisker_age(column_name=list_of_selected_column_age[0])

data_clean = data_clean.copy()

for column in list_of_selected_column_age:
    print('start cleaning outlier on', column)
    lower, upper = upper_lower_whisker_age(column)
    data_clean = data_clean[(data_clean[column] > lower) & (data_clean[column] < upper)]
    print('cleaning outlier on', column, 'was finished!')

sns.boxplot(data=data_clean, x='car_age')
plt.show()

"""**Studying Core Parameters Without Outliers**

Price
"""

data['price'].hist(bins=10)
data_clean['price'].hist(bins=10)

sns.boxplot(data=data_clean, x='price')
plt.show()

q1_price = data_clean['price'].describe()['25%']
q3_price = data_clean['price'].describe()['75%']
iqr_price = q3_price - q1_price

lower_whisker_price = q1_price - 1.5 * iqr_price
upper_whisker_price = q3_price + 1.5 * iqr_price

print("Q1:", q1_price)
print("Q3:", q3_price)
print("Interquartile Range (IQR):", iqr_price)
print("Lower Whisker:", lower_whisker_price)
print("Upper Whisker:", upper_whisker_price)

data_clean.loc[data_clean['price'] > 50495.0]

"""Car Age"""

data['car_age'].hist(bins=20)
data_clean['car_age'].hist(bins=20)

sns.boxplot(data=data_clean, x='car_age')
plt.show()

"""Odometer"""

data['odometer'].hist(bins=20)
data_clean['odometer'].hist(bins=20)

sns.boxplot(data=data_clean, x='odometer')
plt.show()

"""Conclusion

1. On column price and car_age they are no longer have outliers.
2. On column odometer there are still few outliers but the amount is way lower than before

**Detail Analysis**

Advertisement Time
"""

mean_ad = data_clean['days_listed'].mean()
median_ad = data_clean['days_listed'].median()
print('Average time for adversitement:', mean_ad.round(2), 'days')
print('Median time for advertisement:', median_ad, 'days')

q1_ad = data_clean['days_listed'].describe()['25%']
q3_ad = data_clean['days_listed'].describe()['75%']
iqr_ad = q3_ad - q1_ad

lower_whisker_ad = q1_ad - 1.5 * iqr_ad
upper_whisker_ad = q3_ad + 1.5 * iqr_ad

print("Q1:", q1_ad)
print("Q3:", q3_ad)
print("Interquartile Range (IQR):", iqr_ad)

fast_sell = data_clean.query('days_listed < 19')
average_sell = data_clean.query('days_listed >= 19 & days_listed <= 53')
slow_sell = data_clean.query('days_listed > 53')
print('Percentage of fast sell ad:', len(fast_sell),'cars')
print('Percentage of average sell ad:', len(average_sell),'cars')
print('Percentage of slow sell ad:', len(slow_sell),'cars')

"""Based on calculation above:

1. The average of ad is 33 to 39 days until it taken down.
2. If we use statistical approach, we can say when the ad is categorize as fast sell when its only needs 19 days to be taken down, and if its over 53 days then it categorize as slow sell.

Average Price of Each Type of Vehicle
"""

ad_count = data_clean.pivot_table(index='type', values='days_listed', aggfunc='sum').sort_values('days_listed', ascending=False)

ad_count.plot(kind='bar', figsize=(10,5))
plt.show()

#Bus
bus = data_clean.query("type == 'bus'")
bus.head(2)

bus.plot(x='days_listed', y='price', kind='scatter', figsize=(10,5))
plt.show()

#Hatchback
hatchback = data_clean.query("type == 'hatchback'")
hatchback.head(2)

hatchback.plot(x='days_listed', y='price', kind='scatter', figsize=(10,5))
plt.show()

#Pick up
pickup = data_clean.query("type == 'pickup'")
pickup.head(2)

pickup.plot(x='days_listed', y='price', kind='scatter', figsize=(10,5))
plt.show()

data_use = data_clean.query('type in ("SUV", "sedan")')
data_use.head()

"""Price Factor¶"""

correlation = data_use.select_dtypes(include=['number']).corr()

plt.figure(figsize=(10, 8))
sns.heatmap(correlation, annot=True)
plt.show()

"""Based on the correlation table we can conclude that:

1. The younger the car the more expensive the price is. (positive correlation)
2. When the milleage is higher the price tend to be more cheaper. (negative correlation)
3. The higher the capacity of the engine (cylinder) the more expensive the car is. (positive correlation)

Categoric Analysis
"""

# Transmission vs Price
plt.figure(figsize=(10, 6))
sns.violinplot(data=data_use, x='price', y='transmission')
plt.show()

"""Based on the analysis held on transmission against price:

1. Automatic and manual transmission has cheaper price compared to other type of transmission.
"""

# Color vs Price
plt.figure(figsize=(10, 6))
sns.violinplot(data=data_use, x='price', y='paint_color')
plt.show()

plt.figure(figsize=(15, 10))

plt.subplot(2, 3, 1)
plt.title('Correlation between price and cylinders')
sns.scatterplot(data=data_use, x='price', y='cylinders')

plt.subplot(2, 3, 2)
plt.title('Days Listed distibution')
sns.scatterplot(data=data_use, x='price', y='car_age')

plt.subplot(2, 3, 3)
plt.title('Price distibution')
sns.scatterplot(data=data_use, x='price', y='odometer')

plt.subplot(2, 3, 4)
plt.title('Odometer distibution')
sns.scatterplot(data=data_use, x='price', y='condition')

plt.subplot(2, 3, 5)
plt.title('Odo per year distibution')
sns.scatterplot(data=data_use, x='price', y='is_4wd')

plt.show()

"""Based on analysis held on paint color against price:

1. Yellow and orange are 2 top most expensive color
2. White tend to be more expensive also, followed by black and red
3. Other tacky color tend to have cheaper price

**Conclusion**

The purpose of this project is to know what parameter that has effects to the price of car sold. Therefore, the project has been done as the step bellow:

1. **Data Exploratory.** apakah ada nilai yang aneh atau anomali?:
    - Missing value has been found in column is_4wd, paint_color, odometer, and cylinder.
    - Outliers were found in column price, odometer, and car_age.
    - The date format was not proper.
    - The type of values were not proper.
2. **Data Exploratory.** bagaimana nilai anomali itu bisa terjadi?:
    - It may be caused by typo.
3. **Handling Data Anomalies.** In order to fix the problem stated in number 1. We have decided to run things as bellow:
    - Filled the missing values in column is_4wd and cylinder with 0. Filled missing value in paint_color with text unstated instead of blank, and filled missing value in odometer with mean of model_year.
    - Erased outlier values in price, car_age, odometer since the amount is not significant.
    - Format the date with to_datetime method.
    - Format the type with astype method.
4. **Analysis.** In this step we focus on parameters that might have correlation with price as the goal of the project. The method used such as creating the histograms and charts, find out the correlation using corr() method and violinplot.
5. **Hypothesis**. apa insight awal yang kamu harapkan?
    - The thing that influenced the car price are mileage, age, engine capacity.
4. **Summary.** Based on the anaylis that has been done, we know that:
    - There are 3 main factor that play significant affect the price of car sold, they are age, milleage, and engine capacity.
    - The younger the car the more expensive the price is. (positive correlation)
    - When the milleage is higher the price tend to be more cheaper. (negative correlation)
"""

